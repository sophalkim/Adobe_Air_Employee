<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   height="600" minWidth="800"
					   creationComplete="init();">
	
	<fx:Script>
		<![CDATA[
		import flash.data.SQLConnection;
		import flash.data.SQLResult;
		import flash.data.SQLStatement;
		import flash.filesystem.File;
		
		private var conn:SQLConnection;
		private var createStmt:SQLStatement;
		private var insertStmt:SQLStatement;
		private var insertStmt2:SQLStatement;
		private var insertStmt3:SQLStatement;
		private var selectStmt:SQLStatement;
		
		private var insert1Complete:Boolean = false;
		private var insert2Complete:Boolean = false;
		private var insert3Complete:Boolean = false;
		
		private function init():void
		{
		conn = new SQLConnection();
		conn.addEventListener(SQLEvent.OPEN, openSuccess);
		conn.addEventListener(SQLErrorEvent.ERROR, openFailure);
		
		status = "Creating and opening database";
		
		// Use these two lines for an on-disk database
		// but be aware that the second time you run the app you'll get errors from
		// creating duplicate records.
		//				var dbFile:File = File.applicationStorageDirectory.resolvePath("DBSample.db");
		//				conn.openAsync(dbFile);
		
		// Use this line for an in-memory database
		conn.openAsync(null);
		}
		
		private function openSuccess(event:SQLEvent):void
		{
		conn.removeEventListener(SQLEvent.OPEN, openSuccess);
		conn.removeEventListener(SQLErrorEvent.ERROR, openFailure);
		
		createTable();
		}
		
		private function openFailure(event:SQLErrorEvent):void
		{
		conn.removeEventListener(SQLEvent.OPEN, openSuccess);
		conn.removeEventListener(SQLErrorEvent.ERROR, openFailure);
		
		status = "Error opening database";
		
		trace("event.error.message:", event.error.message);
		trace("event.error.details:", event.error.details);
		}
		
		private function createTable():void
		{
		status = "Creating table";
		
		createStmt = new SQLStatement();
		
		createStmt.sqlConnection = conn;
		var sql:String = "";
		sql += "CREATE TABLE IF NOT EXISTS employees (";
		sql += "	empId		INTEGER PRIMARY KEY AUTOINCREMENT,";
		sql += "	firstName	TEXT,";
		sql += "	lastName	TEXT,";
		sql += "	email		TEXT,";
		sql += "	note		TEXT";
		sql += ")";
		createStmt.text = sql;
		
		createStmt.addEventListener(SQLEvent.RESULT, createResult);
		createStmt.addEventListener(SQLErrorEvent.ERROR, createError);
		
		createStmt.execute();
		}
		
		private function createResult(event:SQLEvent):void
		{
		createStmt.removeEventListener(SQLEvent.RESULT, createResult);
		createStmt.removeEventListener(SQLErrorEvent.ERROR, createError);
		
		addData();
		}
		
		private function createError(event:SQLErrorEvent):void
		{
		status = "Error creating table";
		
		createStmt.removeEventListener(SQLEvent.RESULT, createResult);
		createStmt.removeEventListener(SQLErrorEvent.ERROR, createError);
		
		trace("CREATE TABLE error:", event.error);
		trace("event.error.message:", event.error.message);
		trace("event.error.details:", event.error.details);
		}
		
		
		private function addData():void
		{
		status = "Adding data to table";
		
		insertStmt = new SQLStatement();
		insertStmt.sqlConnection = conn;
		var sql:String = "";
		sql += "INSERT INTO employees (firstName, lastName, email, note) ";
		sql += "VALUES ('Bob', 'Smith', 'bobsmith@aol.com', 'Hi there')";
		insertStmt.text = sql;
		
		insertStmt.addEventListener(SQLEvent.RESULT, insertResult);
		insertStmt.addEventListener(SQLErrorEvent.ERROR, insertError);
		
		insertStmt.execute();
		
		
		}
			
		private function insertContact(firstName:String, lastName:String, email:String, note:String):void
		{
			status = "Adding data to table";
			
			insertStmt = new SQLStatement();
			insertStmt.sqlConnection = conn;
			var sql:String = "";
			sql += "INSERT INTO employees (firstName, lastName, email, note) ";
			sql += "VALUES ('"+firstName+"', '"+lastName+"', '"+email+"', '"+note+"')";
			insertStmt.text = sql;
			
			insertStmt.addEventListener(SQLEvent.RESULT, insertResult);
			insertStmt.addEventListener(SQLErrorEvent.ERROR, insertError);
			
			insertStmt.execute();
			accordion.selectedIndex=2;
			
		}
		
		private function insertResult(event:SQLEvent):void
		{
		var stmt:SQLStatement = event.target as SQLStatement;
		stmt.removeEventListener(SQLEvent.RESULT, insertResult);
		stmt.removeEventListener(SQLErrorEvent.ERROR, insertError);
		
		if (stmt == insertStmt)
		{
		insert1Complete = true;
		}
		else
		{
		insert2Complete = true;
		}
		
		if (insert1Complete && insert2Complete)
		{
		status = "Ready to load data";
		
		//					getData();
		}
		}
		
		private function insertError(event:SQLErrorEvent):void
		{
		status = "Error inserting data";
		
		insertStmt.removeEventListener(SQLEvent.RESULT, insertResult);
		insertStmt.removeEventListener(SQLErrorEvent.ERROR, insertError);
		
		trace("INSERT error:", event.error);
		trace("event.error.message:", event.error.message);
		trace("event.error.details:", event.error.details);
		}
		
		
		private function getData():void
		{
		status = "Loading data";
		
		selectStmt = new SQLStatement();
		selectStmt.sqlConnection = conn;
		var sql:String = "SELECT firstName, lastName, email, note FROM employees";
		selectStmt.text = sql;
		
		selectStmt.addEventListener(SQLEvent.RESULT, selectResult);
		selectStmt.addEventListener(SQLErrorEvent.ERROR, selectError);
		
		selectStmt.execute();
		}
		
		private function selectResult(event:SQLEvent):void
		{
		status = "Data loaded";
		
		selectStmt.removeEventListener(SQLEvent.RESULT, selectResult);
		selectStmt.removeEventListener(SQLErrorEvent.ERROR, selectError);
		
		var result:SQLResult = selectStmt.getResult();
		
		resultsGrid.dataProvider = result.data;
		
		//				var numRows:int = result.data.length;
		//				for (var i:int = 0; i < numRows; i++)
		//				{
		//					var output:String = "";
		//					for (var prop:String in result.data[i])
		//					{
		//						output += prop + ": " + result.data[i][prop] + "; ";
		//					}
		//					trace("row[" + i.toString() + "]\t", output);
		//				}				
		}
		
		private function selectError(event:SQLErrorEvent):void
		{
		status = "Error loading data";
		
		selectStmt.removeEventListener(SQLEvent.RESULT, selectResult);
		selectStmt.removeEventListener(SQLErrorEvent.ERROR, selectError);
		
		trace("SELECT error:", event.error);
		trace("event.error.message:", event.error.message);
		trace("event.error.details:", event.error.details);
		}
			
		private function cancel():void {
			accordion.selectedIndex=0;
		}
			
		]]>
		
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.validators.Validator;
			
			protected function sbmt_clickHandler(evt:MouseEvent):void {
				/*var arr:Array = Validator.validateAll(valArr);
				if (arr.length == 0) {
					Alert.show("Form is valid!");
				}*/
				accordion.selectedIndex=2;
			}
		]]>
	</fx:Script>

	<fx:Declarations>
		<!--<fx:Array id="valArr">
			<mx:StringValidator id="firstNameVal" source="{firstName}" property="text" required="true" maxLength="64" />
			<mx:StringValidator id="lastNameVal" source="{lastName}" property="text" required="true" maxLength="32" />
			<mx:StringValidator id="emailVal" source="{email}" property="text" required="true" maxLength="32" />
			<mx:SocialSecurityValidator id="noteVal" source="{note}" property="text" required="false" />
		</fx:Array>-->
	</fx:Declarations>
	
	<mx:Accordion id="accordion" width="100%" height="100%" >

		<mx:VBox label="Employees" width="100%" height="100%">
			<mx:HBox><mx:Button label="Load data" click="getData();"/></mx:HBox>
			<!--<mx:DataGrid id="resultsGrid" height="100%" width="100%" />-->
			<mx:DataGrid id="resultsGrid" width="100%" height="100%">
				<mx:columns>
					<mx:DataGridColumn dataField="firstName" headerText="First Name"/>
					<mx:DataGridColumn dataField="lastName" headerText="Last Name"/>
					<mx:DataGridColumn dataField="email" headerText="Email" minWidth="240"/>
					<mx:DataGridColumn dataField="note" headerText="Note"/>
				</mx:columns>
			</mx:DataGrid>	
		</mx:VBox>
		
		<mx:VBox label="Add Employee">
			<!--<s:Form id="form" defaultButton="{submit}">
				<s:FormItem label="First Name*:" required="true">
					<s:TextInput id="firstName" maxChars="64" />
				</s:FormItem>
				<s:FormItem label="Last Name*:">
					<s:TextInput id="lastName" maxChars="64" />
				</s:FormItem>
				<s:FormItem label="Email*:" required="true">
					<s:TextInput id="email" maxChars="32" />
				</s:FormItem>
				<s:FormItem label="Note*:" required="true">
					<s:TextInput id="note" maxChars="32"/>
				</s:FormItem>
				<s:FormItem>
					<s:Button id="submit" label="Submit" click="sbmt_clickHandler(event);" />
				</s:FormItem>
			</s:Form>-->
			<s:Form id="form">
				<s:FormItem label="First Name*:">
					<s:TextInput id="firstName" maxChars="64" minWidth="250" />
				</s:FormItem>
				<s:FormItem label="Last Name*:">
					<s:TextInput id="lastName" maxChars="64" minWidth="250"/>
				</s:FormItem>
				<s:FormItem label="Email*:">
					<s:TextInput id="email" maxChars="32" minWidth="250"/>
				</s:FormItem>
				<s:FormItem label="Note*:">
					<s:TextInput id="note" minHeight="150" minWidth="250"/>
				</s:FormItem>
				<s:HGroup >
					<s:Button label="cancel" click="cancel()"/>
					<s:Button label="Save" click="insertContact(firstName.text, lastName.text, email.text, note.text)"/>
				</s:HGroup>
				
			</s:Form>
		</mx:VBox>
		
		
		
		
		<mx:VBox label="Thank You Page" width="100%" height="100%" verticalAlign="middle" horizontalAlign="center">
			<s:VGroup width="100%" height="100%" verticalAlign="middle" horizontalAlign="center"> 
				<s:Label text="Thank you for Submitting the Form." fontSize="40"/>
			</s:VGroup>	
			
			
		</mx:VBox>
		
	</mx:Accordion>
	
</s:WindowedApplication>
